1. 毕业论文（设计）的目的和意义
 在此我引用导师对毕业论文（设计）的目标要求：“要求学生综合运用本科阶段学习的计算机科学技术知识，尤其是程序设计和软件工程领域学习的方法、训练的代码能力，架构自己感兴趣的技术路线，结合自己探求的问题形成软件需求，然后有条理第系统落实分析问题、建立模型、软件设计、系统实施、测试调试的等传统软件工程的全部的流程。践行毕业设计，总结开发文档撰写论文，践行二者的有机结合，从而在实践和理论二个维度训练学生专业的计算思维和工程思维。”
1.1 明确毕业论文和毕业设计的关系
 学校通用的毕业论文（设计）管理手册，手册上的表述是“毕业论文（设计）” ，从字面上看是以毕业论文为主，毕业设计作品没有做硬性要求。而我认为这对于以软件开发为方向的毕设模式描述不太准确，因为我们一般是先要做出毕设软件，然后才可总结写出毕业论文。
 为明确本专业的毕设和论文的关系，我们把“毕业论文（设计）”的文字表述，明确改为为“毕业设计/论文”，这种定义明确了论文的前提是设计（也即学生开发的软件作品），设计的文档总结和理论提升则是论文。所以下文我们都采用这样的表述。
 在我们计算机专业软件开发的毕业论文中，可以配和论文表述提供软件的过程运行的截图，甚至还可以在论文中直接提供互联网可访问的毕设作品地址，这种方式来证明论文的文字阐述更加可信，是仅纯粹依靠文字表述的论文不可比拟的，这也是本专业论文的特色。
1.2 对毕业设计/论文内涵和意义理解
 我们作为计算机科学技术专业的本科生，在即将完成学业之际，确有必要用一个作品来回顾总结本学科专业学习的知识系统，梳理课程体系最核心的东西。
 在我的毕业设计中，有关的核心课程包括：面向对象的程序设计语言、数据结构和算法、操作系统、软件工程等。这些核心课程所提供理论指导其实非常抽象的。而且还基本上以理论知识为主，因此学完这些课程后感觉一直有所缺憾，加上本人在实践层面应用这些核心课程的技术能力还很稚嫩，因此我认为毕业设计应该把大学理论的学习在实践层面做一次综合演练和总结，当然也要配合学习当前最新的一些技术，以形成自己对计算机软硬件体系的系统专业的理解。
 深刻理解计算机系统（computing system）对我们专业开发者而言，非常重要，这也是我们未来对接数字世界最为重要的窗口，从其他专业人眼中看来，我们是专业的，因此我们的理解尽量要更加接近本质，接近技术的底层。
1.3 毕业设计/论文和个人专业成长关系
 毕业设计/论文是本科教育的重要环节，其综合性和个性化很强，对提升本科生的专业能力意义很大。我们可以从在个人成长的高度来对待这个环节，为了具有时代感，我结合国家实现中国式现代化的目标，来理解教育部和学校的规划。仍然引用导师李教授的观点：本科生要从自身角度主动规划，让设计/论文成为本科生主动学习和自我教育的最后一战。围绕本专业的目标，把自己打造成具有现代工程思维的工程师、掌握现代数字工具的人，当然还应该是兼具人文情怀的全面发展的人（这也许是我们为什么要写论文和学会答辩的原由之一）。
 我想此次毕业之作（设计/论文）任重道远，如何积极地甚至愉快地走完这条漫长而兼具不确定性的征途？ 我思考这个问题良久，得出结论：为了少走弯路，亲手实践（构建代码），广泛阅读（文献文档查阅），乐于总结（撰写文档）是正确走好这段路程的行为范式。任何事情其付出和回报是对等的，坚持这个行为范式，日积月累，我们必须成长起来！
 希望通过这一年的学习研究，我或能开启教授常提到的本专业的计算思维和代码能力，体验到个人能力成长的快乐。

2. 毕业设计/论文选题的技术路线和研究方法
 磨刀不误砍柴功，要落实好做毕业设计、写通毕业论文，选择技术路线和做好规划是顶层设计，这是本一节分析阐述的内容。
2.1 实现路径的规划
 导师把毕设完成分为二个阶段：首先按选择一条自己感兴趣的技术实践路线加以学习，在导师的软件案例引导下理解一些宏观的技术，但更重要的是：构建自己的高质量代码的能力。心里有底了后进入第二个阶段再结合自己感兴趣的社会问题，在有关计算和软件的理论的加持之下尝试探索适合自己能力的解决方案，最后在完成毕设的实践基础上做一个总结，形成自己论文，进而加深和体会这几年学习的理论，从实践升华到理论，实现我们本科生专业成长！
2.2 毕设的技术路线规划
计算机科学与技术是一个大学科，我总结其中的专业方向可以大致分为三种：一是研究计算机硬件体系的架构，这种方向接近微电子数字电路和芯片研究，这种硬件开发水平当然极高，不过也不是我的兴趣和特长。二是研究系统软件的体系和架构，这种方向深入操作系统的体系架构或管理，我对此有些许兴趣，但由于社会需求并不太大，所以这个方向这仅作为我的学习小分支。三则是我选择的研究应用软件的开发，不仅是因为社会的各方面各层次的对此类人才的需求非常大，更是因为我深知本人作为一般的本科生水平有限，也更喜欢从发现问题，到分析问题再到解决问题这个相对直观的思维来学习和实践。
我从查阅的几篇硕士论文的写作次序上看，我发现绝大多数人从发现问题，到分析问题再到解决问题这个思路来写，但我认为本科本专业的学生主要的也是更重要是要落脚在解决问题的技术上来，确切的说需要整合技术实现解决问题的框架，对我们普通学生而言，则关键在于学懂会用核心课程一些理论和方法，能动手践行实现几个关键技术构建的项目。但即使是我选择的应用软件开发的子方向，其内涵是非常丰富也可以是非常庞杂的，就比如说常见的高级计算机语言吧就不下十几种，而且几乎每种都是可以非常深刻且独具自己特色的，以我有限的时间和能力，如果没有做好技术路线选择，就可能会在自己不懂或不感兴趣的浩瀚技术海洋中被逐渐消磨学习热情，事倍功半。
简单地可以把这条技术路线看作打造修炼我的高质量代码能力之路，分三个层次：
一是对计算机硬件和操作系统的理解和运用能力，我们写的代码是运行在操作系统之上，而操作系统又是对接硬件的基础，在不影响开发效率前提下，让自己的代码架构在偏底层，则会更好地锻炼我们的对系统的掌控能力，提升所开发的应用软件的性能，减小消耗，也越可能使自己的代码为他人所用。我选择的Web应用（Web Application）的技术路线是基于HTML5国际标准，其具有跨平台特性，能通过现代浏览器在桌面和移动端高效运行。现代浏览器由于其开源的特性，性能极佳，已经广泛地存在于移动互联网时代的各类设备之中，从开发者角度看相当于操作系统的延申，这十几年来为我们的Web应用软件插上了腾飞的翅膀。为了简单起见，在此把互联网看作一个更大平台计算系统，因为Web应用为互联网而生，因此我的毕业开发的应用可以很方便对接互联网络，可以极低成本在互联网上运行（完全可以包含在我的上网的网费里），不受时空限制。
二是面向对象（OOP）计算机语言的运用和构建代码的能力。几乎所有的现代计算机语言都是OOP语言，我选择的Web应用（Web Application）方向的程序设计语言则是流行的JavaScript，其国际标准则是著名的ECMAScript，其强大和简洁的OOP能力极具表达力，加上其函数式（Functional）编程的特性，让我们稍加学习，就可以对Web应用的异步事件处理写出符合自己思路的程序来，解决异步响应问题让我有很强的满足感，因此选择这个语言对普通开发者非常友好。另外，HTML和CSS也是本次毕设开发要用到的较为次要的语言，我更多是综合这三个语言，在几个层面践行MVC设计模式，体验了伟大的W3C前辈们努力推行的HTML5平台的开发思想，比如用HTML用于建立应用的模型（Model），用CSS设计应用的外观渲染层（View），用JS开发应用的控制行为层（Controller），当深入JS面向对象开发之后，为组织代码的更精细和微观的MVC模式也需要多次运用。
三是对软件工程的理解和软件开发过程和版本的控制能力。近些年国家层面加大了一些大工程规划建设，我突然感觉“工程”二字变得高尚神圣起来，本专业虽然也有一门软件工程的课，但似乎由于本科生学得太早，无法理解成年人跨界合作的世界，因此感觉还没有领悟到工程的要义。而本次毕设选择Web方向，其原生的开源理念，配合上Git这个现代版本管理工具，不仅让我们的代码有了自由的意义，也为大的程序增加了时间的维度的控制，配合Github的远程代码仓库的分享后，自此代码不再是一个个人的事，工程的内涵二字才变得生动而有意义。
在毕设的后半个阶段和论文的编写中，我们运用传统的软件工程的ADIT（Analysis、Design、Implementation、Testing）开发模式（其实也是多人合作的管理）才不至于流于形式，尤其是在我们引入和运用现代开源思想下诞生的Git工具后，因为可以便捷分享和学习他人的优秀代码，软件开发写代码转变成为人和人之间的学习、人与人之间的合作，软件工程的原则和代码规范对低年级本科生就像一堆空洞的文字堆砌，在毕设后也变得鲜活起来。
这条毕业设计/论文之路和技术路线看似艰难，但我发现在学习完成几个技术后，不但我对自己代码能力和计算机底层的理解更加自信，而且我感觉对宏观需求问题看得更加清楚了，还发分析问题能力也比之前高了不少，这也说明普通本科生在技术还较弱时，不要急于照搬书本，先忙于分析问题和需求，而是在毕业设计中首先要完善技术的学习，规划好比较具体的技术路线。
2.3 研究方法
我身边一些人在自己的领域学了十几年，却可能还没有意识到自己学习方法不对，因此事倍功半！其实不管是在哪个领域学习研究，其学习方法很多是相通的，也是可以互相借鉴的。
可以拿这个道理来类比研究方法，普通本科生对研究方法感觉比较抽象，其实不管我们研究什么领域，研究方法也是相通的，下面阐述我阅读和探索对本专业的研究方法的理解。
2.3.1 文献法，在和导师沟通后，我的理解可以用一句话表达，即：“利用前人的文字深入学习总结和研究本领域的知识和技术的方法”，对于我们Web应用方向而言，就文献法而言，在自己代码能力成长的任何阶段，我们无法离开文献法，然而承载知识的媒体形式非常丰富，包括：书籍、在线文档、社区论坛、期刊、会议报告等等，我的毕业设计的Web应用技术方向的资料来源有下面几类：
一是被中国IT领域诙谐地取名为“衣冠禽兽”：“ O’Reilly Media ”、“ Manning Publications”，这二大著名的出版集团出版了大量经典计算机科学技术书籍，全球开发者也把有大量自己私藏的这类书籍以电子文件的形式，广泛地发布在互联网络的各个开发者社区，有些书籍对我这个穷学生而言真是价值不菲，当然这些书全部都是英文原版，在这个知识开源的时代，我想原书作者也应该能原谅一个发展中国家的普通本科生免费看他的书吧，记得鲁迅笔下的孔乙己说“窃书不能算偷，哎，读书人的事……”；
二是在线文档和社区论坛的文章，主要是W3C国际组织的Web标准和Mozilla基金会的MDN文档网站，二者分别站在科学家和工程师的二个层次，都有二十多年的积累和知识沉淀，他们在线上发表了大量公开文档，描绘了Web的过去、现在、将来。W3C主要以Web国际标准和最佳实践为主，而MDN则偏向Web的最佳实践和各从层面应用的教学和讨论；
三是则国人用得最多的知网平台，在这里主要可以学习写论文的规范、了解我选择的毕设选题他人在理论上的研究和探索，对本科生而言可提供理论的指导和展示学术的规范，但对于梦想成为开发者的本科生而言，这些文章对于我们毕设的软件开发能力（高质量代码能力）的意义不大，但对毕业论文还是很有参考价值的。当然，文字材料还有其他的来源，在线信息如此丰富，也是因为我们的Web技术广泛而又深刻地应用在Internet上，让知识可以跨越国界、跨越种族、跨越阶层，感谢开创和应用Web的前辈们把人们带向光明，在此就不一一枚举了。
2.3.2 模型研究法
对于写代码应用的本科生而言，我们必须擅长使用的另一种研究方法那就是“模型研究法”。这个研究方法非常具体，也很有意思，其给人的快乐甚至可以与打游戏对比。比如承载我们Web应用的台式机、笔记本、手机、平板，传递在线信息要用到的互联网、服务器，沟通硬件和我们的代码之间的操作系统、浏览器、代码编辑器、编译器，这些软硬件对象，对我们而言，都值得从写代码的角度去研究，我们笼统地称它们为对象，这些对象最终会在我们大脑中就会被理解为抽象的模型，我们再通过分析把这些模型程序化、数据化，最后写出代码来，这种行为本质上就是先在思维上“建模”，再用OOP语言表述出来。
在OOP分析和开发过程中，我在毕设中试图解决的问题，也被定义成为了各级各种模型。模型研究只是更为抽象，与具体的计算机语言无关，在毕设中我也尝试使用国际标准UML（Unified Modeling Language）语言来建立抽象模型。我感觉采用UML模型研究法和面向对象的程序设计方法的目标是一致的，只是在不同层面分析表述问题而已。因此采用模型研究法，对我的毕设而言就是用UML对问题建模，当然这比较抽象，做好有一定难度，而使用OOP程序对画好的模型开展程序设计则更为具体直观，通过熟悉的OOP语言和代码运行环境运行和调试模型，我们甚至可以倒推出模型设计的问题和缺陷。我个人的观点是对于本科生而言，可能直接写代码建立模型研究模型，代码跑通后，再利用UML语言绘制模型，作为代码的文档资料则更合理，毕竟本科生还很稚嫩，无法比拟高级程序员乃至系统架构师那样的抽象能力和丰富的经验。